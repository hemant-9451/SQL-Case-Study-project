use case_study;

select * from fact;

select * from Location;

select * from Product;


--1.Display the number of states present in the LocationTable. 

select  count (distinct state) from Location;

--2. How many products are of regular type?

select count(Product) as product from Product  where Type = 'regular';

--3. How much spending has been done on marketing of product ID 1?

select  sum (marketing) from fact where ProductId =1


--4. What is the minimum sales of a product?

select MIN (sales) as 'min_sales' from fact

--5. Display the max Cost of Good Sold (COGS). 

select MAX(cogs) as ' max_cogs' from fact

--6. Display the details of the product where product type is coffee.

select * from product where Product_type = 'coffee'

--7. Display the details where total expenses are greater than 40.

select * from fact where Total_Expenses> 40

--8. What is the average sales in area code 719?

select AVG(sales) from fact where Area_Code = 719

--9. Find out the total profit generated by Colorado state

select SUM(profit) as 'total_profit' from fact F
inner join Location L on F.area_code = L.area_code
where State = 'colorado' 


--10. Display the average inventory for each product ID.

select productid, AVG(inventory) from fact 
group by ProductId
order by ProductId

--11. Display state in a sequential order in a Location Table.

select distinct state from Location
order by State 

--12. Display the average budget margin of the Product where the average budget margin should be greater than 100.

select productid, AVG(budget_margin) from fact 
group by productid
having AVG( budget_margin)>100 
order by ProductId

--13. What is the total sales done on date 2010-01-01?

select SUM(sales) from fact where Date = '2010-01-01' 

--14. Display the average total expense of each product ID on an individual date.

select DATE, productid, AVG(total_expenses) from fact
group by date, ProductId
order by date,  ProductId


--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.

select date, F.ProductId, product_type, product, sales, profit, state, L.Area_Code  from fact F
inner join Product P on F.ProductId = P. ProductId
inner join Location L on F.Area_Code = L.Area_Code


--16. Display the rank without any gap to show the sales wise rank.

select sales, DENSE_RANK() over(order by sales desc) as 'rank' from fact


--17. Find the state wise profit and sales.

select state, sum (profit) as profit ,sum (sales) as  sales from fact F
inner join Location L on L.area_code = F.Area_Code 
group by state


--18. Find the state wise profit and sales along with the productname.

select state, product, sum (profit) as profit ,sum (sales) as  sales from fact F
inner join Location L on L.area_code = F.Area_Code 
inner join Product P on P.ProductId = F.ProductId
group by state, Product
order by State, Product


--19. If there is an increase in sales of 5%, calculate the increasedsales.

select sales,
(sales * 0.05)Increase_sales,
(sales+(sales*0.05))after_add 
from fact

--20. Find the maximum profit along with the product ID and producttype

select F.productid, product_type, profit from fact F
inner join Product P on P.ProductId = F.ProductId
where Profit=
(select MAX(profit) from fact)


-- 21. Create a stored procedure to fetch the result according to the product type from Product Table.

create procedure Ptype @val varchar (20)
as 
select * from Product
where Product_Type =@val

exec Ptype 'coffee'



--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

select *, IIF(total_expenses<60, 'profit', 'loss') as Remark from fact


--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.

select DATEPART(week, date) as week, productid, SUM(sales) as 'total_ sales' from fact
group by DATEPART(WEEK, Date), ProductId
order by DATEPART(WEEK, Date), ProductId

--24. Apply union and intersection operator on the tables which consist of attribute area code.

select area_code from fact
union
select area_code from Location

select area_code from fact
intersect
select area_code from Location

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.

Create function PT02 (@val varchar(10))
returns table
as
return Select * from Product where Product_Type=@val


Select * from dbo.PT02('coffee')


--26. Change the product type from coffee to tea where product ID is 1 and undo it. 

begin tran
update Product set Product_Type = 'tea' where ProductId = 1
select * from Product

rollback tran


--27. Display the date, product ID and sales where total expenses are between 100 to 200.

select DATE, productid, sales from fact
where Total_Expenses between 100  and 200 


--28. Delete the records in the Product Table for regular type.

delete from Product where Type = 'regular'


--29. Display the ASCII value of the fifth character from the columnProduct

Select Product,ASCII(SUBSTRING(product,5,1)) ascii_value from Product